<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head'); %>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js"
      integrity="sha512-r6rDA7W6ZeQhvl8S7yRVQUKVHdexq+GAlNkNNqVC7YyIV+NwqCTJe2hDWCiffTyRNOeGEzRRJ9ifvRm/HCzGYg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
  </head>

  <body>
    <header><%- include('../partials/header'); %></header>

    <div class="container">
      <div id="reader" style="width: 300px; height: 300px"></div>
      <canvas id="myChart"></canvas>

      <button class="btn btn-primary" onclick="update()">Update</button>
    </div>

    <script>
      const ctx = document.getElementById('myChart');

      let data = {
        gender: 0,
        weight: 80,
        entries: [
          { amount: 3, date: new Date('01/01/2024 09:00') },
          { amount: 1, date: new Date('01/01/2024 10:00') },
          { amount: 2, date: new Date('01/01/2024 13:00') },
          { amount: 1, date: new Date('01/01/2024 15:00') }
        ]
      };

      function calculateBAC(gender, amount, weight) {
        const widmarkFactor = gender === 0 ? 0.68 : 0.55;
        return Math.max((amount * 12) / (weight * widmarkFactor), 0);
      }

      function generateDatasets(data) {
        const metabolismRate = 0.15;

        // Get the start hour of the first
        const startHour = data.entries.reduce((prev, curr) => {
          return curr.date.getHours() < prev ? curr.date.getHours() : prev;
        }, 24);

        const hours = _.range(startHour, 24); // Create an array representing all hours in a day

        // Generate bar set (Amount of drinks)
        const entries = hours.map((hour) => {
          return _.sumBy(
            data.entries.filter((e) => e.date.getHours() === hour),
            'amount'
          );
        });

        const calculations = [];

        for (let i = 0; i < hours.length; i++) {
          let BAC = 0;

          if (entries[i] > 0) {
            BAC = calculateBAC(data.gender, entries[i], data.weight);

            if (i > 0) {
              const previousBAC = calculations[i - 1] || 0;
              BAC += previousBAC;
              BAC -= metabolismRate * (hours[i] - hours[i - 1]);
            }
          } else if (i > 0) {
            // If no drinks were consumed during this hour, but it's not the first hour,
            // then decrease BAC due to metabolism
            BAC = calculations[i - 1] - metabolismRate;
          }

          // Store the BAC values in an array for later use in the chart
          calculations.push(Math.max(BAC.toFixed(2), 0));
        }

        return { hours, entries, calculations };
      }

      function createChartData(hours, entries, calculations) {
        return {
          datasets: [
            {
              type: 'bar',
              label: 'Amount of Drinks',
              data: entries,
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            },
            {
              type: 'line',
              label: 'BAC',
              data: calculations,
              fill: false,
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 2
            }
          ],
          labels: hours.map((hour) => `${hour}:00`)
        };
      }

      const { hours, entries, calculations } = generateDatasets(data);
      const mixedChart = new Chart(ctx, {
        type: 'bar',
        data: createChartData(hours, entries, calculations)
      });

      function update() {
        data.entries.push({
          amount: 1,
          date: new Date('01/01/2024 19:00')
        });

        const { hours, entries, calculations } = generateDatasets(data);
        const newData = createChartData(hours, entries, calculations);
        mixedChart.data = newData;
        mixedChart.update();
      }

      function onScanSuccess(decodedText, decodedResult) {
        console.log(decodedResult);
        console.log(decodedText);
      }

      let config = {
        fps: 10,
        qrbox: { width: 200, height: 200 },
        rememberLastUsedCamera: true,
        // Only support camera scan type.
        supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA]
      };

      let html5QrcodeScanner = new Html5QrcodeScanner('reader', config, /* verbose= */ false);
      html5QrcodeScanner.render(onScanSuccess);
    </script>
  </body>
</html>
