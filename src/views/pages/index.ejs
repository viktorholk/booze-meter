<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../partials/head'); %>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js"></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js"
      integrity="sha512-r6rDA7W6ZeQhvl8S7yRVQUKVHdexq+GAlNkNNqVC7YyIV+NwqCTJe2hDWCiffTyRNOeGEzRRJ9ifvRm/HCzGYg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
  </head>

  <body>
    <header><%- include('../partials/header'); %></header>

    <div class="container">
      <!-- <div id="reader" style="width: 300px; height: 300px"></div> -->

      <div class="dashboard">
        <canvas id="dashboard-chart"></canvas>
      </div>
      <button class="btn btn-primary" onclick="update()">Update</button>
    </div>

    <script src="/scripts/chart.js"></script>

    <script>

      // Get all the database entries from the route and parse them
      const dataEntries = <%- JSON.stringify(entries) %>;
      const user = <%- JSON.stringify(user) %>;

      function calculateBAC(gender, amount, weight) {
        const widmarkFactor = gender === 0 ? 0.68 : 0.55;
        return Math.max((amount * 12) / (weight * widmarkFactor), 0);
      }

      function generateDatasets(user, entries) {

        const metabolismRate = 0.15;

        // Get the start hour of the first

        const startHour = entries.reduce((prev, curr) => {
          return new Date(curr.created_at).getHours() < prev ? new Date(curr.created_at).getHours() : prev;
        }, 24);

        const hours = _.range(startHour, 24); // Create an array representing all hours in a day

        // Generate bar set (Amount of drinks)
        const amountPerHour = hours.map((hour) => {
          return _.sumBy(
            entries.filter((e) => new Date(e.created_at).getHours() === hour),
            'amount'
          );
        });

        const calculations = [];

        for (let i = 0; i < hours.length; i++) {
          let BAC = 0;

          if (amountPerHour[i] > 0) {
            BAC = calculateBAC(user.gender, amountPerHour[i], user.weight);

            if (i > 0) {
              const previousBAC = calculations[i - 1] || 0;
              BAC += previousBAC;
              BAC -= metabolismRate * (hours[i] - hours[i - 1]);
            }
          } else if (i > 0) {
            // If no drinks were consumed during this hour, but it's not the first hour,
            // then decrease BAC due to metabolism
            BAC = calculations[i - 1] - metabolismRate;
          }

          // Store the BAC values in an array for later use in the chart
          calculations.push(Math.max(BAC.toFixed(2), 0));
        }

        return { hours, amountPerHour, calculations };
      }

      const { hours, amountPerHour, calculations} = generateDatasets(user, dataEntries);

      let chart = createChart('dashboard-chart', {
        hours: hours,
        entries: amountPerHour,
        calculations: calculations
      })
    </script>
  </body>
</html>
